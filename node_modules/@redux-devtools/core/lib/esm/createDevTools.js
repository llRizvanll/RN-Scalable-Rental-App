import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Children, Component } from 'react';
import PropTypes from 'prop-types';
import { connect, Provider, ReactReduxContext } from 'react-redux';
import { instrument } from '@redux-devtools/instrument';

function logError(type) {
  if (type === 'NoStore') {
    console.error('Redux DevTools could not render. You must pass the Redux store ' + 'to <DevTools> either as a "store" prop or by wrapping it in a ' + '<Provider store={store}>.');
  } else {
    console.error('Redux DevTools could not render. Did you forget to include ' + 'DevTools.instrument() in your store enhancer chain before ' + 'using createStore()?');
  }
}

export default function createDevTools(children) {
  var _class;

  var monitorElement = Children.only(children);
  var monitorProps = monitorElement.props;
  var Monitor = monitorElement.type;
  var ConnectedMonitor = connect(function (state) {
    return state;
  })(Monitor);
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(DevTools, _Component);

    var _super = _createSuper(DevTools);

    function DevTools(props, context) {
      var _this;

      _classCallCheck(this, DevTools);

      _this = _super.call(this, props, context);

      if (ReactReduxContext) {
        if (_this.props.store && !_this.props.store.liftedStore) {
          logError('NoLiftedStore');
        }

        return _possibleConstructorReturn(_this);
      }

      if (!props.store && !context.store) {
        logError('NoStore');
        return _possibleConstructorReturn(_this);
      }

      if (context.store) {
        _this.liftedStore = context.store.liftedStore;
      } else {
        _this.liftedStore = props.store.liftedStore;
      }

      if (!_this.liftedStore) {
        logError('NoLiftedStore');
      }

      return _this;
    }

    _createClass(DevTools, [{
      key: "render",
      value: function render() {
        if (ReactReduxContext) {
          // For react-redux@6
          if (this.props.store) {
            if (!this.props.store.liftedStore) {
              return null;
            }

            return /*#__PURE__*/React.createElement(Provider, {
              store: this.props.store.liftedStore
            }, /*#__PURE__*/React.createElement(ConnectedMonitor, monitorProps));
          }

          return /*#__PURE__*/React.createElement(ReactReduxContext.Consumer, null, function (props) {
            if (!props || !props.store) {
              logError('NoStore');
              return null;
            }

            if (!props.store.liftedStore) {
              logError('NoLiftedStore');
              return null;
            }

            return /*#__PURE__*/React.createElement(Provider, {
              store: props.store.liftedStore
            }, /*#__PURE__*/React.createElement(ConnectedMonitor, monitorProps));
          });
        }

        if (!this.liftedStore) {
          return null;
        }

        return /*#__PURE__*/React.createElement(ConnectedMonitor, _extends({}, monitorProps, {
          store: this.liftedStore
        }));
      }
    }]);

    return DevTools;
  }(Component), _defineProperty(_class, "contextTypes", {
    store: PropTypes.object
  }), _defineProperty(_class, "propTypes", {
    store: PropTypes.object
  }), _defineProperty(_class, "instrument", function (options) {
    return instrument(function (state, action) {
      return Monitor.update(monitorProps, state, action);
    }, options);
  }), _class;
}