{"version":3,"sources":["ScreenNativeComponent.js"],"names":["interfaceOnly"],"mappings":";;;;;;;AAKA;;;;AALA;AACA;AACA;AACA;;AACA;eAyDgB,qCAAoC,WAApC,EAAiD;AAC/DA,EAAAA,aAAa,EAAE;AADgD,CAAjD,C","sourcesContent":["/**\n * @flow strict-local\n * @format\n */\n/* eslint-disable */\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\nimport type { ViewProps } from 'react-native/Libraries/Components/View/ViewPropTypes';\nimport type { HostComponent } from 'react-native/Libraries/Renderer/shims/ReactNativeTypes';\nimport type { ColorValue } from 'react-native/Libraries/StyleSheet/StyleSheet';\nimport type {\n  BubblingEventHandler,\n  WithDefault,\n  Int32,\n} from 'react-native/Libraries/Types/CodegenTypes';\n\ntype ScreenEvent = $ReadOnly<{||}>;\n\ntype ScreenDismissedEvent = $ReadOnly<{|\n  dismissCount: Int32,\n|}>;\n\ntype StackPresentation = 'push' | 'modal' | 'transparentModal';\ntype StackAnimation =\n  | 'default'\n  | 'flip'\n  | 'simple_push'\n  | 'none'\n  | 'fade'\n  | 'slide_from_right'\n  | 'slide_from_left'\n  | 'slide_from_bottom'\n  | 'fade_from_bottom';\n\ntype ReplaceAnimation = 'pop' | 'push';\n\nexport type NativeProps = $ReadOnly<{|\n  ...ViewProps,\n  onAppear?: ?BubblingEventHandler<ScreenEvent>,\n  onDisappear?: ?BubblingEventHandler<ScreenEvent>,\n  onDismissed?: ?BubblingEventHandler<ScreenDismissedEvent>,\n  onWillAppear?: ?BubblingEventHandler<ScreenEvent>,\n  onWillDisappear?: ?BubblingEventHandler<ScreenEvent>,\n  // TODO: implement this props on iOS\n  stackPresentation?: WithDefault<StackPresentation, 'push'>,\n  stackAnimation?: WithDefault<StackAnimation, 'default'>,\n  gestureEnabled?: WithDefault<boolean, true>,\n  replaceAnimation?: WithDefault<ReplaceAnimation, 'pop'>,\n  screenOrientation?: string,\n  statusBarAnimation?: string,\n  statusBarColor?: ColorValue,\n  statusBarStyle?: string,\n  statusBarTranslucent?: boolean,\n  statusBarHidden?: boolean,\n  navigationBarColor?: ColorValue,\n  navigationBarHidden?: boolean,\n  nativeBackButtonDismissalEnabled?: boolean,\n  activityState?: WithDefault<Int32, -1>,\n|}>;\n\ntype ComponentType = HostComponent<NativeProps>;\n\nexport default (codegenNativeComponent<NativeProps>('RNSScreen', {\n  interfaceOnly: true,\n}): ComponentType);\n"]}